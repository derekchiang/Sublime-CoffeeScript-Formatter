// Generated by CoffeeScript 1.6.2
(function() {
  var Manager, extend,
    __slice = [].slice;

  extend = function() {
    var clone, copy, copyIsArray, deep, i, length, name, objectHelper, options, src, target;

    options = void 0;
    name = void 0;
    src = void 0;
    copy = void 0;
    copyIsArray = void 0;
    clone = void 0;
    target = arguments[0] || {};
    i = 1;
    length = arguments.length;
    deep = false;
    objectHelper = {
      hasOwn: Object.prototype.hasOwnProperty,
      class2type: {},
      type: function(obj) {
        if (obj == null) {
          return String(obj);
        } else {
          return objectHelper.class2type[Object.prototype.toString.call(obj)] || "object";
        }
      },
      isPlainObject: function(obj) {
        var e, key;

        if (!obj || objectHelper.type(obj) !== "object" || obj.nodeType || objectHelper.isWindow(obj)) {
          return false;
        }
        try {
          if (obj.constructor && !objectHelper.hasOwn.call(obj, "constructor") && !objectHelper.hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
            return false;
          }
        } catch (_error) {
          e = _error;
          return false;
        }
        key = void 0;
        for (key in obj) {
          ({});
        }
        return key === undefined || objectHelper.hasOwn.call(obj, key);
      },
      isArray: Array.isArray || function(obj) {
        return objectHelper.type(obj) === "array";
      },
      isFunction: function(obj) {
        return objectHelper.type(obj) === "function";
      },
      isWindow: function(obj) {
        return (obj != null) && obj === obj.window;
      }
    };
    if (typeof target === "boolean") {
      deep = target;
      target = arguments[1] || {};
      i = 2;
    }
    if (typeof target !== "object" && !objectHelper.isFunction(target)) {
      target = {};
    }
    if (length === i) {
      target = this;
      --i;
    }
    while (i < length) {
      if ((options = arguments[i]) != null) {
        for (name in options) {
          src = target[name];
          copy = options[name];
          if (target === copy) {
            continue;
          }
          if (deep && copy && (objectHelper.isPlainObject(copy) || (copyIsArray = objectHelper.isArray(copy)))) {
            if (copyIsArray) {
              copyIsArray = false;
              clone = (src && objectHelper.isArray(src) ? src : []);
            } else {
              clone = (src && objectHelper.isPlainObject(src) ? src : {});
            }
            target[name] = extend(deep, clone, copy);
          } else {
            if (copy !== undefined) {
              target[name] = copy;
            }
          }
        }
      }
      i++;
    }
    return target;
  };

  Manager = (function() {
    function Manager() {
      var buffer, getObjectArr, next_id, objectId, store;

      next_id = 0;
      buffer = {};
      store = {};
      getObjectArr = function(obj) {
        return store[objectId(obj)];
      };
      objectId = function(obj) {
        if (obj == null) {
          return null;
        } else {
          if (obj.__id == null) {
            obj.__id = next_id++;
          }
          return obj.__id;
        }
      };
      this.makeClean = function(obj) {
        delete obj.__id;
        return delete obj.__commitId;
      };
      this.clone = function(obj) {
        return extend(true, {}, obj);
      };
      this.add = function() {
        var obj, objects, _i, _len, _results;

        objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _results = [];
        for (_i = 0, _len = objects.length; _i < _len; _i++) {
          obj = objects[_i];
          _results.push(buffer[objectId(obj)] = this.clone(obj));
        }
        return _results;
      };
      this.commit = function() {
        var key, value;

        for (key in buffer) {
          value = buffer[key];
          if (store[key] != null) {
            store[key].push(value);
          } else {
            store[key] = [value];
          }
          value.__commitId = store[key].length - 1;
        }
        return buffer = {};
      };
      this.prev = function(obj) {
        var objectArr;

        objectArr = getObjectArr(obj);
        if (objectArr) {
          if (obj.__commitId != null) {
            if (obj.__commitId === 0) {
              throw "It's already the earliest version";
            } else {
              return objectArr[obj.__commitId - 1];
            }
          } else {
            return objectArr[objectArr.length - 2];
          }
        } else {
          throw "Object not versioned";
        }
      };
      this.next = function(obj) {
        var objectArr;

        objectArr = getObjectArr(obj);
        if (objectArr) {
          if ((obj.__commitId == null) || obj.__commitId === objectArr.length - 1) {
            throw "It's already the latest version";
          } else {
            return objectArr[obj.__commitId + 1];
          }
        } else {
          throw "Object not versioned";
        }
      };
      this.reset = function() {
        return buffer = {};
      };
      this.getVersion = function(obj, commitId) {
        var objectArr;

        objectArr = getObjectArr(obj);
        if ((0 <= commitId && commitId < objectArr.length)) {
          return objectArr[commitId];
        } else {
          throw "Invalid commit id";
        }
      };
      this.getCleanVersion = function(obj, commitId) {
        var anotherObj;

        anotherObj = this.getVersion(obj, commitId);
        makeClean(anotherObj);
        return anotherObj;
      };
    }

    return Manager;

  })();

  module.exports["new"] = function() {};

}).call(this);
